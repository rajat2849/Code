[33mcommit 91dca3a4accf5f50cb714027a107bc8c62073b24[m[33m ([m[1;36mHEAD -> [m[1;32mmaster[m[33m)[m
Author: Rajat <Rajat2849@gmail.com>
Date:   Tue Apr 19 04:24:26 2022 +0000

    This is a Calculator

[1mdiff --git a/Calculator.java b/Calculator.java[m
[1mnew file mode 100644[m
[1mindex 0000000..3c67e0e[m
[1m--- /dev/null[m
[1m+++ b/Calculator.java[m
[36m@@ -0,0 +1,118 @@[m
[32m+[m[32m/*********************************************Â  Save this file as MyCalculator.java toÂ compileÂ itÂ useÂ  javac MyCalculator.java toÂ useÂ theÂ calcuatorÂ doÂ thisÂ  java[m[41m [m
[32m+[m[32mMyCalculator Â  **********************************************/ importÂ java.awt.*;Â Â  import java.awt.event.*; /*********************************************/Â Â [m[41m [m
[32m+[m[32mpublicÂ classÂ MyCalculatorÂ extendsÂ FrameÂ Â  { Â Â  public boolean setClear=true; doubleÂ number,Â memValue;Â Â  char op; Â Â  String digitButtonText[] = {"7", "8", "9", "4", "5",[m[41m [m
[32m+[m[32m"6", "1", "2", "3", "0", "+/-", "." }; StringÂ operatorButtonText[]Â =Â {"/",Â "sqrt",Â "*",Â "%",Â "-",Â "1/X",Â "+",Â "="Â };Â Â  String memoryButtonText[] = {"MC", "MR", "MS",[m[41m [m
[32m+[m[32m"M+" }; StringÂ specialButtonText[]Â =Â {"Backspc",Â "C",Â "CE"Â };Â Â  MyDigitButtonÂ digitButton[]=newÂ MyDigitButton[digitButtonText.length];Â Â  MyOperatorButton[m[41m [m
[32m+[m[32moperatorButton[]=new MyOperatorButton[operatorButtonText.length]; MyMemoryButtonÂ memoryButton[]=newÂ MyMemoryButton[memoryButtonText.length];Â Â  MySpecialButton[m[41m [m
[32m+[m[32mspecialButton[]=new MySpecialButton[specialButtonText.length]; Â Â  Label displayLabel=new Label("0",Label.RIGHT); LabelÂ memLabel=newÂ Label("Â ",Label.RIGHT);Â Â [m[41m [m
[32m+[m[32mfinalÂ intÂ FRAME_WIDTH=325,FRAME_HEIGHT=325;Â Â  final int HEIGHT=30, WIDTH=30, H_SPACE=10,V_SPACE=10; finalÂ intÂ TOPX=30,Â TOPY=50;Â Â [m
[32m+[m[32m///////////////////////////[m
[32m+[m[32mMyCalculator(StringÂ frameText)//constructorÂ Â  { super(frameText);Â Â  intÂ tempX=TOPX,Â y=TOPY;Â Â  displayLabel.setBounds(tempX,y,240,HEIGHT);[m[41m [m
[32m+[m[32mdisplayLabel.setBackground(Color.BLUE);Â Â  displayLabel.setForeground(Color.WHITE); add(displayLabel);Â Â  memLabel.setBounds(TOPX,Â Â TOPY+HEIGHT+Â V_SPACE,WIDTH,Â HEIGHT);Â Â [m[41m [m
[32m+[m[32madd(memLabel); Â Â [m
[32m+[m[32m// set Co-ordinates for Memory Buttons[m
[32m+[m[32mtempX=TOPX;Â Â Â  y=TOPY+2*(HEIGHT+V_SPACE); for(intÂ i=0;Â i<memoryButton.length;Â i++)Â Â  {[m[41m [m
[32m+[m[32mmemoryButton[i]=newÂ MyMemoryButton(tempX,y,WIDTH,HEIGHT,memoryButtonText[i],Â this);Â Â  memoryButton[i].setForeground(Color.RED); y+=HEIGHT+V_SPACE;Â Â [m
[32m+[m[32m}[m
[32m+[m[32mÂ Â [m
[32m+[m[32m//set Co-ordinates for Special Buttons[m
[32m+[m[32mtempX=TOPX+1*(WIDTH+H_SPACE);Â y=TOPY+1*(HEIGHT+V_SPACE);Â Â  for(int i=0;i<specialButton.length;i++) {Â Â  specialButton[i]=new[m[41m [m
[32m+[m[32mMySpecialButton(tempX,y,WIDTH*2,HEIGHT,specialButtonText[i], this); specialButton[i].setForeground(Color.RED);Â Â  tempX=tempX+2*WIDTH+H_SPACE;[m
[32m+[m[32m}Â Â [m
[32m+[m[32m//setÂ Co-ordinatesÂ forÂ DigitÂ ButtonsÂ Â [m
[32m+[m[32mint digitX=TOPX+WIDTH+H_SPACE; intÂ digitY=TOPY+2*(HEIGHT+V_SPACE);Â Â  tempX=digitX; y=digitY; for(intÂ i=0;i<digitButton.length;i++)Â Â  {[m[41m [m
[32m+[m[32mdigitButton[i]=newÂ MyDigitButton(tempX,y,WIDTH,HEIGHT,digitButtonText[i],Â this);Â Â  digitButton[i].setForeground(Color.BLUE); tempX+=WIDTH+H_SPACE;Â Â [m[41m [m
[32m+[m[32mif((i+1)%3==0){tempX=digitX; y+=HEIGHT+V_SPACE;}[m
[32m+[m[32m}Â Â [m
[32m+[m[32m//setÂ Co-ordinatesÂ forÂ OperatorÂ ButtonsÂ Â [m
[32m+[m[32mint opsX=digitX+2*(WIDTH+H_SPACE)+H_SPACE; intÂ opsY=digitY;Â Â  tempX=opsX; y=opsY; for(intÂ i=0;i<operatorButton.length;i++)Â Â  { tempX+=WIDTH+H_SPACE;Â Â [m[41m [m
[32m+[m[32moperatorButton[i]=new MyOperatorButton(tempX,y,WIDTH,HEIGHT,operatorButtonText[i], this); operatorButton[i].setForeground(Color.RED);Â Â  if((i+1)%2==0){tempX=opsX;[m[41m [m
[32m+[m[32my+=HEIGHT+V_SPACE;}[m
[32m+[m[32m}Â Â [m
[32m+[m[32maddWindowListener(newÂ WindowAdapter()Â Â  { publicÂ voidÂ windowClosing(WindowEventÂ ev)Â Â  {System.exit(0);}[m
[32m+[m[32m});Â Â [m
[32m+[m[32msetLayout(null);Â Â  setSize(FRAME_WIDTH,FRAME_HEIGHT); setVisible(true);Â Â [m
[32m+[m[32m}[m
[32m+[m[32m//////////////////////////////////Â Â [m
[32m+[m[32mstatic String getFormattedText(double temp) {Â Â  String resText=""+temp; if(resText.lastIndexOf(".0")>0)Â Â  resText=resText.substring(0,resText.length()-2);[m[41m [m
[32m+[m[32mreturnÂ resText;Â Â [m
[32m+[m[32m}[m
[32m+[m[32m////////////////////////////////////////Â Â [m
[32m+[m[32mpublic static void main(String []args) {Â Â  new MyCalculator("Calculator - JavaTpoint");[m
[32m+[m[32m}Â Â [m
[32m+[m[32m}[m
[32m+[m[32mÂ Â  /*******************************************/ Â Â  class MyDigitButton extends Button implements ActionListener {Â Â  MyCalculator cl; Â Â [m
[32m+[m[32m//////////////////////////////////////////[m
[32m+[m[32mMyDigitButton(intÂ x,intÂ y,Â intÂ width,intÂ height,StringÂ cap,Â MyCalculatorÂ clc)Â Â  { super(cap);Â Â  setBounds(x,y,width,height); this.cl=clc;Â Â  this.cl.add(this);[m[41m [m
[32m+[m[32maddActionListener(this);Â Â [m
[32m+[m[32m}[m
[32m+[m[32m////////////////////////////////////////////////Â Â [m
[32m+[m[32mstatic boolean isInString(String s, char ch) {Â Â  for(int i=0; i<s.length();i++) if(s.charAt(i)==ch) return true; returnÂ false;Â Â [m
[32m+[m[32m}[m
[32m+[m[32m/////////////////////////////////////////////////Â Â [m
[32m+[m[32mpublic void actionPerformed(ActionEvent ev) {Â Â  String tempText=((MyDigitButton)ev.getSource()).getLabel(); Â Â  if(tempText.equals(".")) {Â Â  if(cl.setClear)[m[41m [m
[32m+[m[32mÂ Â Â Â {cl.displayLabel.setText("0.");cl.setClear=false;}Â Â  else if(!isInString(cl.displayLabel.getText(),'.'))[m[41m [m
[32m+[m[32mÂ Â Â Â cl.displayLabel.setText(cl.displayLabel.getText()+".");Â Â  return;[m
[32m+[m[32m}Â Â [m
[32m+[m[32mintÂ index=0;Â Â  try{ Â Â Â Â Â Â Â Â index=Integer.parseInt(tempText);Â Â [m
[32m+[m[32m}catch(NumberFormatException e){return;}[m
[32m+[m[32mÂ Â  if (index==0 && cl.displayLabel.getText().equals("0")) return; Â Â  if(cl.setClear) Â Â Â Â Â Â Â Â Â Â Â Â {cl.displayLabel.setText(""+index);cl.setClear=false;}Â Â  else[m[41m [m
[32m+[m[32mÂ Â Â Â cl.displayLabel.setText(cl.displayLabel.getText()+index);Â Â [m
[32m+[m[32m}//actionPerformed classÂ definationÂ Â [m
[32m+[m[32m/********************************************/Â Â  classÂ MyOperatorButtonÂ extendsÂ ButtonÂ implementsÂ ActionListenerÂ Â  { MyCalculatorÂ cl;Â Â [m[41m [m
[32m+[m[32mMyOperatorButton(intÂ x,intÂ y,Â intÂ width,intÂ height,StringÂ cap,Â MyCalculatorÂ clc)Â Â  { super(cap);Â Â  setBounds(x,y,width,height); this.cl=clc;Â Â  this.cl.add(this);[m[41m [m
[32m+[m[32maddActionListener(this);Â Â [m
[32m+[m[32m}[m
[32m+[m[32m///////////////////////Â Â [m
[32m+[m[32mpublic void actionPerformed(ActionEvent ev) {Â Â  String opText=((MyOperatorButton)ev.getSource()).getLabel(); Â Â  cl.setClear=true;[m[41m [m
[32m+[m[32mdoubleÂ temp=Double.parseDouble(cl.displayLabel.getText());Â Â  if(opText.equals("1/x"))Â Â  { Â Â Â Â tryÂ Â  {double tempd=1/(double)temp;[m[41m [m
[32m+[m[32mÂ Â Â Â Â Â Â Â cl.displayLabel.setText(MyCalculator.getFormattedText(tempd));}Â Â  catch(ArithmeticException excp)[m[41m [m
[32m+[m[32mÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â {cl.displayLabel.setText("DivideÂ byÂ 0.");}Â Â  return; Â Â Â Â }Â Â  if(opText.equals("sqrt")) Â Â Â Â {Â Â  try Â Â Â Â Â Â Â Â {doubleÂ tempd=Math.sqrt(temp);Â Â [m[41m [m
[32m+[m[32mcl.displayLabel.setText(MyCalculator.getFormattedText(tempd));} Â Â Â Â Â Â Â Â Â Â Â Â catch(ArithmeticExceptionÂ excp)Â Â  {cl.displayLabel.setText("Divide by 0.");} Â Â Â Â return;Â Â [m
[32m+[m[32m}[m
[32m+[m[32mif(!opText.equals("="))Â Â  { Â Â Â Â cl.number=temp;Â Â  cl.op=opText.charAt(0); Â Â Â Â return;Â Â [m
[32m+[m[32m}[m
[32m+[m[32m//Â processÂ =Â buttonÂ pressedÂ Â [m
[32m+[m[32mswitch(cl.op) {Â Â  case '+': Â Â Â Â temp+=cl.number;break;Â Â  case '-': Â Â Â Â temp=cl.number-temp;break;Â Â  case '*': Â Â Â Â temp*=cl.number;break;Â Â  case '%':[m[41m [m
[32m+[m[32mÂ Â Â Â try{temp=cl.number%temp;}Â Â  catch(ArithmeticException excp) Â Â Â Â Â Â Â Â {cl.displayLabel.setText("DivideÂ byÂ 0.");Â return;}Â Â  break; caseÂ '/':Â Â [m[41m [m
[32m+[m[32mtry{temp=cl.number/temp;} Â Â Â Â Â Â Â Â catch(ArithmeticExceptionÂ excp)Â Â  {cl.displayLabel.setText("Divide by 0."); return;} Â Â Â Â break;Â Â [m
[32m+[m[32m}//switch[m
[32m+[m[32mÂ Â  cl.displayLabel.setText(MyCalculator.getFormattedText(temp));[m
[32m+[m[32m//cl.number=temp;Â Â [m
[32m+[m[32m}//actionPerformed classÂ Â [m
[32m+[m[32m/****************************************/Â Â  classÂ MyMemoryButtonÂ extendsÂ ButtonÂ implementsÂ ActionListenerÂ Â  { MyCalculatorÂ cl;Â Â [m
[32m+[m[32m/////////////////////////////////Â Â [m
[32m+[m[32mMyMemoryButton(int x,int y, int width,int height,String cap, MyCalculator clc) {Â Â  super(cap); setBounds(x,y,width,height);Â Â  this.cl=clc; this.cl.add(this);Â Â [m[41m [m
[32m+[m[32maddActionListener(this);[m
[32m+[m[32m}Â Â [m
[32m+[m[32m////////////////////////////////////////////////[m
[32m+[m[32mpublicÂ voidÂ actionPerformed(ActionEventÂ ev)Â Â  { charÂ memop=((MyMemoryButton)ev.getSource()).getLabel().charAt(1);Â Â  cl.setClear=true;Â Â  double[m[41m [m
[32m+[m[32mtemp=Double.parseDouble(cl.displayLabel.getText()); Â Â  switch(memop) {Â Â  case 'C': Â Â Â Â cl.memLabel.setText("Â ");cl.memValue=0.0;break;Â Â  case 'R':[m[41m [m
[32m+[m[32mÂ Â Â Â cl.displayLabel.setText(MyCalculator.getFormattedText(cl.memValue));break;Â Â  case 'S': Â Â Â Â cl.memValue=0.0;Â Â  case '+':[m[41m [m
[32m+[m[32mÂ Â Â Â cl.memValue+=Double.parseDouble(cl.displayLabel.getText());Â Â  if(cl.displayLabel.getText().equals("0") || cl.displayLabel.getText().equals("0.0") )[m[41m [m
[32m+[m[32mÂ Â Â Â Â Â Â Â cl.memLabel.setText("Â ");Â Â  else Â Â Â Â Â Â Â Â cl.memLabel.setText("M");Â Â Â Â Â  break;[m
[32m+[m[32m}//switchÂ Â  actionPerformed classÂ Â [m
[32m+[m[32m/*****************************************/Â Â  classÂ MySpecialButtonÂ extendsÂ ButtonÂ implementsÂ ActionListenerÂ Â  { MyCalculatorÂ cl;Â Â [m[41m [m
[32m+[m[32mMySpecialButton(intÂ x,intÂ y,Â intÂ width,intÂ height,StringÂ cap,Â MyCalculatorÂ clc)Â Â  { super(cap);Â Â  setBounds(x,y,width,height); this.cl=clc;Â Â  this.cl.add(this);[m[41m [m
[32m+[m[32maddActionListener(this);Â Â [m
[32m+[m[32m}[m
[32m+[m[32m//////////////////////Â Â [m
[32m+[m[32mstatic String backSpace(String s) {Â Â  String Res=""; for(intÂ i=0;Â i<s.length()-1;Â i++)Â Res+=s.charAt(i);Â Â  return Res;[m
[32m+[m[32m}Â Â [m
[32m+[m[32m//////////////////////////////////////////////////////////Â Â [m
[32m+[m[32mpublic void actionPerformed(ActionEvent ev) {Â Â  String opText=((MySpecialButton)ev.getSource()).getLabel();[m
[32m+[m[32m//checkÂ forÂ backspaceÂ buttonÂ Â [m
[32m+[m[32mif(opText.equals("Backspc")) {Â Â  String tempText=backSpace(cl.displayLabel.getText()); if(tempText.equals(""))Â Â Â  cl.displayLabel.setText("0"); elseÂ Â Â [m[41m [m
[32m+[m[32mcl.displayLabel.setText(tempText); return;Â Â [m
[32m+[m[32m}[m
[32m+[m[32m//checkÂ forÂ "C"Â buttonÂ i.e.Â ResetÂ Â [m
[32m+[m[32mif(opText.equals("C")) {Â Â  cl.number=0.0; cl.op=' '; cl.memValue=0.0; cl.memLabel.setText("Â ");Â Â [m
[32m+[m[32m}[m
[32m+[m[32mÂ Â [m
[32m+[m[32m//it must be CE button pressed[m
[32m+[m[32mcl.displayLabel.setText("0");cl.setClear=true;Â Â [m
[32m+[m[32m}//actionPerformed classÂ Â [m
[32m+[m[32m/*********************************************Â  Features not implemented and few bugs Â  i) No coding done for "+/-" button. ii)Â MenubarÂ isÂ notÂ included.Â  iii)Not for[m[41m [m
[32m+[m[32mScientific calculation iv)SomeÂ ofÂ theÂ computationÂ mayÂ leadÂ toÂ unexpectedÂ resultÂ  due to the representation of Floating point numbers in computer[m[41m [m
[32m+[m[32mÂ Â Â isÂ anÂ approximationÂ toÂ theÂ givenÂ valueÂ thatÂ canÂ beÂ storedÂ  physically in memory.[m
[32m+[m[32m***********************************************/Â Â [m
